[
  {
    "path": "posts/imageseg/",
    "title": "imageseg",
    "description": "R package for deep learning image segmentation using the U-Net model architecture by Ronneberger (2015), implemented in Keras and TensorFlow. It provides pre-trained models for forest structural metrics (canopy density and understory vegetation density) and a workflow to apply these on custom images",
    "author": [
      {
        "name": "Jürgen Niedballa",
        "url": {}
      }
    ],
    "date": "2022-09-12",
    "categories": [],
    "contents": "\r\nimageseg\r\nR package for deep learning image segmentation using the U-Net model architecture by Ronneberger (2015), implemented in Keras and TensorFlow. It provides pre-trained models for forest structural metrics (canopy density and understory vegetation density) and a workflow to apply these on custom images.\r\nIn addition, it provides a workflow for easily creating model input and model architectures for general-purpose image segmentation based on the U-net architecture. Model can be trained on grayscale or color images, and can provide binary or multi-class image segmentation as output.\r\nThe package can be found on CRAN.\r\nThe preprint of the paper describing the package is available on bioRxiv.\r\nInstallation\r\nFirst, install the R package “R.rsp” which enables the static vignettes.\r\n\r\n\r\n\r\nInstall the imageseg package from CRAN via:\r\n\r\n\r\n\r\nAlternatively you can install from GitHub (requires remotes package and R.rsp):\r\n\r\n\r\n\r\nUsing imageseg requires Keras and TensorFlow. See the vignette for information about installation and initial setup:\r\nTutorial\r\nSee the vignette for an introduction and tutorial to imageseg.\r\n\r\n\r\n\r\nThe vignette covers:\r\n- Installation and setup\r\n- Sample workflow for canopy density assessments\r\n- Training new models\r\n- Continued training of existing models\r\n- Multi-class image segmentation models\r\n- Image segmentation based on grayscale images\r\nForest structure model download\r\nThe models, example predictions, training data and R script for model training for both the canopy and understory model are available from Dryad as a single download.\r\nSee the “Usage Notes” section for details on the dataset.\r\nThe models and script (without the training data) are also hosted on Zenodo and can be downloaded individually from zenodo.\r\nThe pre-trained models for forest canopy density and understory vegetation density are available for download. The zip files contain the model (as .hdf5 files) and example classifications to give an impression of model performance and output:\r\nCanopy model\r\nUnderstory model\r\nPlease see the vignette for further information on how to use these models.\r\nTraining data download\r\nTraining data for both the canopy and understory model are included in the Dryad dataset download in the zip files:\r\nimageseg_canopy_training_data.zip\r\nimageseg_understory_training_data.zip\r\nFor details, please see the Usage Notes and the info.txt files contained in the zip files.\r\nThe training data are not required for users who only wish to use the pre-trained models on their own images.\r\n\r\n\r\n\r\n",
    "preview": "https://raw.githubusercontent.com/EcoDynIZW/EcoDynIZW.github.io/main/img/hex-imageseg.png",
    "last_modified": "2022-09-21T12:26:47+02:00",
    "input_file": {}
  },
  {
    "path": "posts/isorix/",
    "title": "Isorix",
    "description": "This is the development repository of IsoriX, an R package aiming at building isoscapes using mixed models and inferring the geographic origin of organisms based on their isotopic ratios",
    "author": [
      {
        "name": "Alexandre Courtiol",
        "url": {}
      }
    ],
    "date": "2022-09-12",
    "categories": [],
    "contents": "\r\nHow to download and install IsoriX?\r\nYou can download and install the stable version of IsoriX directly from within R by typing:\r\n\r\n\r\ninstall.packages(\"IsoriX\", dependencies = TRUE)\r\n\r\n\r\nNote: if you get into troubles due to gmp, magick, maps, maptools, RandomFields, rgeos, or rgl, retry using simply:\r\n\r\n\r\ninstall.packages(\"IsoriX\")\r\n\r\n\r\nThese packages offer additional functionalities but some of them are particularly difficult to install on some systems.\r\nIf you want the development version of IsoriX, you can download and install it by typing:\r\n\r\n\r\nremotes::install_github(\"courtiol/IsoriX/IsoriX\")\r\n\r\n\r\nMind that you need the R package remotes to be installed for that to work. Mind also that the development version, being under development, can sometimes be broken. So before downloading it make sure that the current build status is build passing. The current built status is provided at the top of this readme document.\r\nAlso, if you access the network via a proxy, you may experience troubles with install_github. In such case try something like:\r\n\r\n\r\nlibrary(httr)\r\nwith_config(use_proxy(\"192.168.2.2:3128\"), devtools::install_github(\"courtiol/IsoriX/IsoriX\"))\r\n\r\n\r\nOff course, unless you are in the same institute than some of us, replace the numbers with your proxy settings!\r\nWhere to learn about IsoriX?\r\nYou can start by reading our bookdown!\r\nThen, if may not be a bad idea to also have a look at our papers: here and there.\r\nAnother great source of help is our mailing list. First register for free (using your Google account) and then feel free to send us questions.\r\nFor specific help on IsoriX functions and objects, you should also check the documentation embedded in the package:\r\n\r\n\r\nhelp(package = \"IsoriX\")\r\n\r\n\r\nin R after having installed and attached (= loaded) the package.\r\nHow can you contribute?\r\nThere are plenty way you can contribute! If you are fluent in R programming, you can improve the code and develop new functions. If you are not so fluent, you can still edit the documentation files to make them more complete and clearer, write new vignettes, report bugs or make feature requests.\r\nSome useful links\r\n\r\n\r\n\r\n",
    "preview": "https://raw.githubusercontent.com/EcoDynIZW/EcoDynIZW.github.io/main/img/hex-isorix.png",
    "last_modified": "2022-09-21T12:26:47+02:00",
    "input_file": {}
  },
  {
    "path": "posts/camtrapr/",
    "title": "Manage Camera Trap Data in R",
    "description": "Learn how to use the {camtrapR} R package for streamlined and flexible camera trap data management. It should be most useful to researchers and practitioners who regularly handle large amounts of camera trapping data.",
    "author": [
      {
        "name": "Jürgen Niedballa",
        "url": {}
      }
    ],
    "date": "2022-05-23",
    "categories": [
      "tutorial",
      "rstats",
      "camera traping",
      "data management"
    ],
    "contents": "\r\n\r\nContents\r\nInstallation\r\nExiftool\r\n\r\nThe {camtrapR} R\r\npackage simplifies camera trap data management in R.\r\nInstallation\r\nYou can install the release version of {camtrapR} from\r\nCRAN:\r\n\r\n\r\ninstall.packages(\"camtrapR\")\r\n\r\n\r\n\r\nExiftool\r\nNumerous important {camtrapR} functions read EXIF\r\nmetadata from JPG images (and videos). This is done via\r\nExiftool, a free and open-source sofware tool developed by\r\nPhil Harvey and available for Windows, MacOS and Linux.\r\nTo make full use of {camtrapR}, you will need\r\nExiftool on your system. You can download it from the\r\nExiftool homepage and follow the installation instruction\r\nin vignette 1.\r\nYou may not need Exiftool if you do not work with image\r\nfiles, but only use {camtrapR} to create input for\r\noccupancy or spatial capture-recapture models from existing record\r\ntables.\r\nSee the article\r\nin Methods in Ecology and Evolution for an overview of the package.\r\nThe five vignettes provide examples for the entire workflow.\r\nCitation\r\n\r\n\r\n\r\n",
    "preview": "https://raw.githubusercontent.com/EcoDynIZW/EcoDynIZW.github.io/main/img/hex-camtrapr.png",
    "last_modified": "2022-10-25T15:30:57+02:00",
    "input_file": {}
  },
  {
    "path": "posts/nlmr/",
    "title": "Simulate Neutral Landscape Models",
    "description": "Learn how to use the {NLMR} R package to simulate neutral landscape models (NLM), a common set of various null models for spatial analysis and as input for spatially-explicit, generic models.",
    "author": [
      {
        "name": "Cédric Scherer",
        "url": "htttps://cedricscherer.com"
      }
    ],
    "date": "2021-08-06",
    "categories": [
      "tutorial",
      "rstats",
      "spatial",
      "modelling"
    ],
    "contents": "\r\nThe {NLMR} R\r\npackage to simulate neutral landscape models (NLM). Designed to be a\r\ngeneric framework like NLMpy, it leverages the\r\nability to simulate the most common NLM that are described in the\r\necological literature.\r\nIf you want to learn more about the {NLMR} package and\r\nthe accompanying {landscapetools} package, check the\r\npublication Sciaini,\r\nFritsch, Scherer 6 Simpkins (2019) Methods in Ecology and\r\nEvolution.\r\nInstallation\r\nThe {NLMR} is not available on CRAN at the moment (see\r\nissue #95). The\r\nonly way to install the package at the moment is:\r\n\r\n\r\n\r\nUsage\r\nEach neutral landscape models is simulated with a single function\r\n(all starting with nlm_) in NLMR, e.g.:\r\n\r\n\r\n\r\n{NLMR} supplies 15 NLM algorithms, with several options\r\nto simulate derivatives of them. The algorithms differ from each other\r\nin spatial auto-correlation, from no auto-correlation (random NLM) to a\r\nconstant gradient (planar gradients).\r\nThe package builds on the advantages of the raster package and\r\nreturns all simulation as RasterLayer objects, thus\r\nensuring a direct compatibility to common GIS tasks and a flexible and\r\nsimple usage:\r\n\r\n[1] \"RasterLayer\"\r\nattr(,\"package\")\r\n[1] \"raster\"\r\nclass      : RasterLayer \r\ndimensions : 100, 100, 10000  (nrow, ncol, ncell)\r\nresolution : 1, 1  (x, y)\r\nextent     : 0, 100, 0, 100  (xmin, xmax, ymin, ymax)\r\ncrs        : NA \r\nsource     : memory\r\nnames      : clumps \r\nvalues     : 1, 3  (min, max)\r\n\r\nVisualization\r\nThe {landscapetools}\r\npackage provides a function show_landscape that was\r\ndeveloped to plot raster objects and help users to adhere to some\r\nstandards concerning color scales and typography. This means for example\r\nthat by default the viridis color scale is applied (and you can pick\r\nothers from the {viridis} package, too).\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "https://raw.githubusercontent.com/EcoDynIZW/EcoDynIZW.github.io/main/img/hex-nlmr.png",
    "last_modified": "2022-10-25T15:30:57+02:00",
    "input_file": {}
  },
  {
    "path": "posts/d6berlinpackage/",
    "title": "Spatial Datasets and Template Maps for Berlin",
    "description": "Learn how to use the {d6berlin} R package that provides spatial data sets and template maps for Berlin with carefully chosen and aesthetically pleasing defaults. The template maps include Berlin districts, green spaces, imperviousness levels, water bodies, district borders, roads, metro stations, and railways. Templates maps are created with a {ggplot2} wrapper function with the utility to add an inset globe with a locator pin, a scalebar, and a caption stating the data sources.",
    "author": [
      {
        "name": "Cédric Scherer",
        "url": "htttps://cedricscherer.com"
      }
    ],
    "date": "2021-03-18",
    "categories": [
      "tutorial",
      "rstats",
      "spatial",
      "Berlin",
      "ggplot2"
    ],
    "contents": "\r\n\r\nContents\r\nInstallation\r\nA Basic Template Map of\r\nImperviousness\r\nBerlin Data Sets {datasets}\r\nAdding Locations to the\r\nMap\r\nCustom\r\nStyling\r\nSave Map\r\n\r\nThe {d6berlin}\r\npackage aims provide template maps for Berlin with carefully chosen\r\nand aesthetically pleasing defaults. Template maps include green spaces,\r\nimperviousness levels, water bodies, district borders, roads, and\r\nrailways, plus the utility to add a globe with locator pin, a scalebar,\r\nand a caption to include the data sources.\r\nThere are two main functionalities:\r\nCreate a template map with imperviousness and\r\ngreen spaces with base_map_imp()\r\nProvide various ready-to-use Berlin data sets\r\nwith sf_*\r\nFurthermore, the package provides utility to add a globe with locator\r\npin, a scalebar, and a caption to include the data sources.\r\nInstallation\r\nYou can install the {d6berlin} package from GitHub:\r\n\r\n\r\n## install.packages(\"devtools\")\r\n## devtools::install_github(\"EcoDynIZW/d6berlin\")\r\nlibrary(d6berlin)\r\n\r\n\r\n\r\n(Note: If you are asked if you want to update other packages either\r\npress “No” (option 3) and continue or update the packages before running\r\nthe install command again.)\r\nA Basic Template Map of Imperviousness\r\nThe basic template map shows levels of imperviousness and green areas\r\nin Berlin. The imperviousness raster data was derived from Geoportal Berlin (FIS-Broker) with a resolution of 10m. The\r\nvector data on green spaces was collected from data provided by the OpenStreetMap Contributors.\r\nThe green spaces consist of a mixture of land use and natural categories\r\n(namely “forest”, “grass”, “meadow”, “nature_reserve”, “scrub”, “heath”,\r\n“beach”, “cliff”).\r\nThe map is projected in EPSG 4326 (WGS84).\r\n\r\n\r\nd6berlin::base_map_imp()\r\n\r\n\r\n#> Aggregating raster data.\r\n#> Plotting basic map.\r\n#> Styling map.\r\n\r\n\r\nYou can also customize the arguments, e.g. change the color\r\nintensity, add a globe with a locator pin, change the resolution of the\r\nraster, and move the legend to a custom position:\r\n\r\n\r\nbase_map_imp(color_intensity = 1, globe = TRUE, resolution = 500,\r\n             legend_x = .17, legend_y = .12)\r\n\r\n\r\n\r\n\r\nIf you think the legend is not need, there is also an option called\r\n\"none\". (The default is \"bottom\". You can also\r\nuse of the predefined setting \"top\" as illustrated below or\r\na custom position as shown in the previous example.)\r\nBerlin Data Sets {datasets}\r\nThe package contains several data sets for Berlin. All of them start\r\nwith sf_, e.g. d6berlin::sf_roads. Here is a\r\nfull overview of the data sets that are available:\r\n\r\n\r\n\r\nAdding Locations to the Map\r\nLet’s assume you have recorded some animal locations or you want to\r\nplot another information on to of this plot. For example, let’s\r\nvisualize the Berlin metro stations by adding\r\ngeom_sf(data = x) to the template map:\r\n\r\n\r\nlibrary(ggplot2)\r\nlibrary(sf)\r\n\r\nmap <- base_map_imp(color_intensity = .3, resolution = 500, legend = \"top\")\r\n\r\nmap + geom_sf(data = sf_metro) ## sf_metro is contained in the {d6berlin} package\r\n\r\n\r\n\r\n\r\nNote: Since the template map contains many filled\r\nareas, we recommend to add geometries with variables mapped to\r\ncolor|colour|col to the template maps.\r\nYou can, of course, style the appearance of the points as usual:\r\n\r\n\r\nmap + geom_sf(data = sf_metro, shape = 8, color = \"red\", size = 2)\r\n\r\n\r\n\r\n\r\nIt is also possible to filter the data inside the\r\ngeom_sf function — no need to use subset:\r\n\r\n\r\nlibrary(dplyr) ## for filtering\r\nlibrary(stringr) ## for filtering based on name\r\n\r\nmap + \r\n  geom_sf(data = filter(sf_metro, str_detect(name, \"^U\")), \r\n          shape = 21, fill = \"dodgerblue\", size = 2) +\r\n  geom_sf(data = filter(sf_metro, str_detect(name, \"^S\")), \r\n          shape = 21, fill = \"forestgreen\", size = 2)\r\n\r\n\r\n\r\n\r\nYou can also use the mapping functionality of ggplot2 to\r\naddress variables from your data set:\r\n\r\n\r\nmap + \r\n  geom_sf(data = sf_metro, aes(color = type), size = 2) +\r\n  scale_color_discrete(type = c(\"dodgerblue\", \"forestgreen\"), \r\n                       name = NULL) +\r\n  guides(color = guide_legend(direction = \"horizontal\",\r\n                              title.position = \"top\", \r\n                              title.hjust = .5))\r\n\r\n\r\n\r\n\r\n(It looks better if you style the legend in the same horizontal\r\nlayout.)\r\nCustom Styling\r\nSince the output is a ggplot object, you can manipulate\r\nthe result as you like (but don’t apply a new theme, this will mess up\r\nthe legend design):\r\n\r\n\r\nlibrary(systemfonts) ## for title font\r\n\r\nbase_map_imp(color_intensity = 1, resolution = 250, globe = TRUE,\r\n             legend_x = .17, legend_y = .12) + \r\n  geom_sf(data = sf_metro, shape = 21, fill = \"white\", \r\n          stroke = .4, size = 4) +\r\n  ggtitle(\"Metro Stations in Berlin\") + \r\n  theme(plot.title = element_text(size = 30, hjust = .5, family = \"Bangers\"),\r\n        panel.grid.major = element_line(color = \"white\", size = .3),\r\n        axis.text = element_text(color = \"black\", size = 8),\r\n        plot.background = element_rect(fill = \"#fff0de\", color = NA),\r\n        plot.margin = margin(rep(20, 4)))\r\n\r\n\r\n\r\n\r\nSave Map\r\nUnfortunately, the size of the text elements is fixed. The best\r\naspect ratio to export the map is 12x9 and you can save it with\r\nggsave() for example:\r\n\r\n\r\nggsave(\"metro_map.pdf\", width = 12, height = 9, device = cairo_pdf)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "https://raw.githubusercontent.com/EcoDynIZW/d6berlin/main/man/figures/hexlogo.png",
    "last_modified": "2022-10-25T15:30:57+02:00",
    "input_file": {}
  },
  {
    "path": "posts/d6package/",
    "title": "Simplify Workflows of D6 Research Projects",
    "description": "Learn how to use the {d6} package to follow the project workflow within the department “Ecological Dynamics” at the Leibniz Institute for Zoo and Wildlife Research. The package functionality allows you to set up a standardized folder structure, to use templates for standardized reports and provides some helpful utility functions.",
    "author": [
      {
        "name": "Cédric Scherer",
        "url": "htttps://cedricscherer.com"
      }
    ],
    "date": "2020-09-12",
    "categories": [
      "tutorial",
      "rstats",
      "workflow",
      "data management"
    ],
    "contents": "\r\n\r\nContents\r\nInstallation\r\nCreate Project Directory\r\nUse A Custom Root\r\nDirectory\r\nUse\r\nVersion Control\r\nSetup without Geo\r\nDirectories\r\nAdd Documentation to Your\r\nProject\r\n\r\nInstall Common Packages\r\nUse Custom Rmarkdown\r\nTemplates\r\nRender Rmarkdown Files to\r\nReports\r\n\r\nThe {d6}\r\npackage aims to simplify workflows of our D6 research projects by\r\nproviding a standardized folder structure incl. version control,\r\nRmarkdown templates, and other utilities.\r\nThere are four main functionalities:\r\nCreate standardized project\r\ndirectories with new_project()\r\nInstall a set of common packages\r\nwith install_d6_packages()\r\nProvide custom Rmarkdown\r\ntemplates via\r\nFile > New File > Rmarkdown... > From Template\r\nRender all Rmarkdown\r\ndocuments to ./docs/report with render_all_reports() or\r\nrender_report()\r\nInstallation\r\nThe package is not on CRAN and needs to be installed from GitHub. To\r\ndo so, open Rstudio and run the following two lines in the console. In\r\ncase the {devtools} package is already installed, skip that\r\nstep.\r\n\r\n\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"EcoDynIZW/d6\")\r\n\r\n\r\n\r\n(Note: If you are asked if you want to update other packages either\r\npress “No” (option 3) and continue or update the packages before running\r\nthe install command again.)\r\nCreate Project Directory\r\nRun the function new_project() to create a new project.\r\nThis will create a standardized directory with all the scaffolding we\r\nuse for all projects in our department. It also add several files needed\r\nfor documentation of your project.\r\nTo start a new project in the current working directory, simply\r\nrun:\r\n\r\n\r\nd6::new_project(\"unicornus_wl_sdm_smith_j\")\r\n\r\n\r\n\r\nPlease give your project a unique and descriptive name:\r\nspecies_country_topic_name\r\nFor example, when John Smith is developing a species distribution\r\nmodels for unicorns in Wonderland, a descriptive title could be:\r\nunicornus_wl_sdm_smith_j. Please use underscores and the international Alpha-2 encoding\r\nfor countries.\r\nThe full scaffolding structure created in the root folder (here\r\nunicornus_wl_sdm_smith_j) is the following:\r\n\r\n. \r\n└── unicornus_wl_sdm_smith_j\r\n    ├── .Rproj.user         —  Rproject files\r\n    ├── data-raw            —  raw data (tabular data in root folder)\r\n    │    └── geo-raw        —  raw spatial data\r\n    ├── docs                —  documents\r\n    │   ├── admin           —  adminstrative docs, e.g. permits \r\n    │   ├── literature      —  literature used for parameterization + ms\r\n    │   ├── manuscript      —  manuscript drafts (main + supplement)\r\n    │   ├── presentations   —  talks and poster presentations\r\n    │   └── reports         —  rendered reports\r\n    ├── output              —  everything that is computed (except plots)\r\n    │   ├── data-proc       —  processed tabular data\r\n    │   └── geo-proc        —  processed spatial data\r\n    ├── plots               —  plot output\r\n    ├── R                   —  scripts\r\n    │   ├── 00_start.R      —  first script to run\r\n    │   └── XX_submit.R     —  final script to run\r\n    ├── .gitignore          —  contains which files to ignore for version control\r\n    ├── .Rbuildignore       —  contains which files to ignore for package builds\r\n    ├── DESCRIPTION         —  contains project details and package dependencies\r\n    ├── NAMESPACE           —  contains context for R objects\r\n    └── project.Rproj       —  Rproject file: use to start your project\r\n\r\nUse A Custom Root Directory\r\nYou don’t need to change the working directory first—you can also\r\nspecify a path to a custom root folder in which the new project folder\r\nis created:\r\n\r\n\r\n## both work:\r\nd6::new_project(\"unicornus_wl_sdm_smith_j\", path = \"absolute/path/to/the/root/folder\")\r\n## or:\r\nd6::new_project(\"unicornus_wl_sdm_smith_j\", path = \"absolute/path/to/the/root/folder/\")\r\n\r\n\r\n\r\nThe resulting final directory of your project would be\r\nabsolute/path/to/the/root/folder/unicornus_wl_sdm_smith_j.\r\nUse Version Control\r\nIf you want to create a GitHub repository for the project at the same\r\ntime, use instead:\r\n\r\n\r\nd6::new_project(\"unicornus_wl_sdm_smith_j\", github = TRUE)\r\n\r\n\r\n\r\nBy default, the visibility of the GitHub repository is set to\r\n“private” but you can also change that:\r\n\r\n\r\nd6::new_project(\"unicornus_wl_sdm_smith_j\", github = TRUE, private_repo = FALSE)\r\n\r\n\r\n\r\nNote that to create a GitHub repo you will need to have configured\r\nyour system as explained here.\r\nSetup without Geo\r\nDirectories\r\nIf your project does not (or will not) contain any spatial data, you\r\ncan prevent the creation of the directories geo-raw and\r\ngeo-proc by setting geo to\r\nFALSE:\r\n\r\n\r\nd6::new_project(\"unicornus_wl_sdm_smith_j\", geo = FALSE)\r\n\r\n\r\n\r\nAdd Documentation to Your\r\nProject\r\nAfter you have set up your project directory, open the file\r\n00_start.R in the R folder. Add the details of\r\nyour project, fill in the readme, add a MIT license (if needed) and add\r\npackage dependencies.\r\nInstall Common Packages\r\nYou can install the packages that are most commonly used in our\r\ndepartment via install_d6_packages():\r\n\r\n\r\nd6::install_d6_packages()\r\n\r\n\r\n\r\nNote that this function is going to check preinstalled versions and\r\nwill only install packages that are not installed with your current R\r\nversion.\r\nAgain, there is an arguement geo so you can decide if\r\nyou want to install common geodata packages as well (which is the\r\ndefault). If you are not intending to process geodata, set\r\ngeo to FALSE:\r\n\r\n\r\nd6::install_d6_packages(geo = FALSE)\r\n\r\n\r\n\r\nThe default packages that are going to be installed are:\r\n\r\ntidyverse (tibble, dplyr, tidyr, ggplot2, readr, forecats, stringr, purrr), lubridate, here, vroom, patchwork, usethis\r\n\r\nThe following packages will be installed in case you specify\r\ngeo = TRUE:\r\n\r\nrgdal, geos, raster, sp, sf, tmap\r\n\r\nUse Custom Rmarkdown\r\nTemplates\r\nThe package also provides several templates for your scripts. In\r\nRstudio, navigate to\r\nFile > New File > RMarkdown... > Templates and\r\nchoose the template you want to use. All templates come with a\r\npreformatted YAML header and chunks for the setup.\r\nThe following templates are available for now:\r\nEcoDynIZW Basic: Template for a basic Rmarkdown research\r\nreport including bits of codes and comments to get started\r\nEcoDynIZW Minimal: Template for an Rmarkdown research\r\nreport (almost empty)\r\nRender Rmarkdown Files to\r\nReports\r\nThe render_*() functions take care of knitting your\r\nRmarkdown files into HTML reports. The functions assume that your .Rmd\r\nfiles are saved in the R directory or any subdirectory, and\r\nwill store the resulting .html files in the according directory, namely\r\n./docs/reports/.\r\nYou can render all .Rmd files that are placed in the R\r\ndirectory and subdirectories in one step:\r\n\r\n\r\nd6::render_all_reports()\r\n\r\n\r\n\r\nYou can also render single Rmarkdown documents via\r\nrender_report():\r\n\r\n\r\nd6::render_report(\"my-report.Rmd\")\r\nd6::render_report(\"notsurewhybutIhaveasubfolder/my-report.Rmd\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "https://raw.githubusercontent.com/EcoDynIZW/EcoDynIZW.github.io/main/img/hex-d6.png",
    "last_modified": "2022-10-25T15:30:57+02:00",
    "input_file": {}
  }
]
